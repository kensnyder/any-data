var d=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var l=(r,t)=>{for(var a in t)d(r,a,{get:t[a],enumerable:!0})},w=(r,t,a,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of y(t))!p.call(r,i)&&i!==a&&d(r,i,{get:()=>t[i],enumerable:!(e=u(t,i))||e.enumerable});return r};var m=r=>w(d({},"__esModule",{value:!0}),r);var b={};l(b,{AnyData:()=>f});module.exports=m(b);function h(r){return Object.prototype.toString.call(r)==="[object Object]"}function n(r){var t,a;return h(r)===!1?!1:(t=r.constructor,t===void 0?!0:(a=t.prototype,!(h(a)===!1||a.hasOwnProperty("isPrototypeOf")===!1)))}var o=new TextEncoder,c=new TextDecoder,f=class r{data;constructor(t){this.data=t}set(t){this.data=t}isSupported(){return this.data===null||this.data instanceof Blob||this.data instanceof ArrayBuffer||s(this.data)||this.data instanceof DataView||this.data instanceof FormData||this.data instanceof URLSearchParams||typeof this.data=="string"||n(this.data)||Array.isArray(this.data)}getDataCategory(){return this.data instanceof Blob||this.data instanceof ArrayBuffer||s(this.data)||this.data instanceof DataView?"bytes":this.data===null||typeof this.data=="string"||this.data instanceof FormData||this.data instanceof URLSearchParams||n(this.data)||Array.isArray(this.data)?"text":"unknown"}isEmpty(){return this.data===null||this.data===""||s(this.data)&&this.data.length===0||this.data instanceof ArrayBuffer&&this.data.byteLength===0||this.data instanceof DataView&&this.data.byteLength===0||this.data instanceof Blob&&this.data.size===0||this.data instanceof URLSearchParams&&this.data.size===0||this.data instanceof FormData&&Array.from(this.data.keys()).length===0}async clone(){if(this.data instanceof Response)return new r(this.data.clone());if(this.data===null||typeof this.data=="string")return new r(this.data);if(this.data instanceof FormData){let t=new FormData;for(let[a,e]of this.data)t.append(a,e);return new r(t)}if(this.data instanceof URLSearchParams){let t=new URLSearchParams;for(let[a,e]of this.data)t.append(a,e);return new r(t)}return new r(structuredClone(this.data))}async blob(){if(this.data instanceof Response){let t=await this.data.blob();return this.data=t,t}if(this.data===null)return new Blob;if(this.data instanceof Blob)return this.data;if(typeof this.data=="string")return new Blob([Buffer.from(this.data,"utf8")]);if(this.data instanceof ArrayBuffer||this.data instanceof DataView||s(this.data))return new Blob([this.data]);if(this.data instanceof FormData)return new Blob([JSON.stringify(await this.json())]);if(this.data instanceof URLSearchParams)return new Blob([await this.text()]);if(n(this.data)||Array.isArray(this.data))return new Blob([JSON.stringify(this.data)]);throw new Error("Unable to convert unsupported data type to Blob")}async arrayBuffer(){if(this.data instanceof Response){let t=await this.data.arrayBuffer();return this.data=t,t}if(this.data===null)return new ArrayBuffer(0);if(this.data instanceof Blob)return this.data.arrayBuffer();if(this.data instanceof ArrayBuffer)return this.data;if(typeof this.data=="string")return o.encode(this.data).buffer;if(s(this.data)||this.data instanceof DataView)return this.data.buffer;if(this.data instanceof FormData||this.data instanceof URLSearchParams)return(await this.blob()).arrayBuffer();if(n(this.data)||Array.isArray(this.data))return o.encode(JSON.stringify(this.data)).buffer;throw new Error("Unable to convert unsupported data type to ArrayBuffer")}async bytes(){if(this.data instanceof Response){if(typeof this.data.bytes=="function"){let a=await this.data.bytes();return this.data=a,a}let t=new Uint8Array(await this.data.arrayBuffer());return this.data=t,t}if(this.data===null)return new Uint8Array;if(this.data instanceof URLSearchParams)return o.encode(String(this.data));if(typeof this.data=="string")return o.encode(this.data);if(this.data instanceof FormData)return o.encode(await this.text());if(this.data instanceof ArrayBuffer)return new Uint8Array(this.data);if(this.data instanceof DataView)return new r(new Blob([this.data])).bytes();if(s(this.data))return this.data;if(this.data instanceof Blob)return typeof this.data.bytes=="function"?this.data.bytes():new Uint8Array(await this.arrayBuffer());if(n(this.data)||Array.isArray(this.data))return o.encode(JSON.stringify(this.data));throw new Error("Unable to convert unsupported data type to a Uint8Array")}async formData(){if(this.data===null)return new FormData;if(this.data instanceof Response){let a=await this.data.formData();return this.data=a,a}if(this.data instanceof FormData)return this.data;if(this.data instanceof URLSearchParams){let a=new FormData;for(let[e,i]of this.data)a.append(e,i);return a}if(this.data instanceof Array){let a=new FormData;for(let e of this.data)a.append(String(e[0]),String(e[1]));return a}let t=new FormData;try{let a=await this.json();for(let[e,i]of Object.entries(a))t.append(e,String(i))}catch{}return t}async json(){if(this.data instanceof Response){let a=await this.data.json();return this.data=a,a}if(this.data instanceof FormData||this.data instanceof URLSearchParams)return Object.fromEntries(this.data);if(n(this.data)||Array.isArray(this.data))return this.data;let t=await this.text();if(t)return JSON.parse(t)}async text(){if(this.data instanceof Response){let t=await this.data.text();return this.data=t,t}return this.data===null?"":this.data instanceof Blob?this.data.text():typeof this.data=="string"?this.data:this.data instanceof ArrayBuffer?c.decode(this.data):s(this.data)||this.data instanceof DataView?c.decode(this.data):this.data instanceof FormData?new Response(this.data).text():this.data instanceof URLSearchParams?this.data.toString():n(this.data)||Array.isArray(this.data)?JSON.stringify(this.data):String(this.data)}};function s(r){return(r instanceof ArrayBuffer||ArrayBuffer.isView(r))&&!(r instanceof DataView)}0&&(module.exports={AnyData});
/*! Bundled license information:

is-plain-object/dist/is-plain-object.mjs:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
